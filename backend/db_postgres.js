import pkg from 'pg';
import './config.js'; // Asegurar que las variables de entorno se carguen
const { Pool } = pkg;

console.log('=== POSTGRESQL DATABASE CONFIGURATION ===');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úì Set' : '‚úó Missing');
console.log('DB_HOST:', process.env.DB_HOST ? '‚úì Set' : '‚úó Missing');
console.log('DB_USER:', process.env.DB_USER ? '‚úì Set' : '‚úó Missing');
console.log('DB_PASSWORD:', process.env.DB_PASSWORD ? '‚úì Set' : '‚úó Missing');
console.log('DB_NAME:', process.env.DB_NAME ? '‚úì Set' : '‚úó Missing');
console.log('DB_PORT:', process.env.DB_PORT ? '‚úì Set' : '‚úó Missing');
console.log('===============================================');

// Configuraci√≥n de PostgreSQL
let pool;

if (process.env.DATABASE_URL) {
  // Usar DATABASE_URL si est√° disponible (t√≠pico de Render)
  console.log('Using DATABASE_URL for connection');
  pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false } // SSL requerido para Render
  });
} else {
  // Usar variables individuales
  console.log('Using individual environment variables');
  pool = new Pool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: process.env.DB_PORT || 5432,
    ssl: { rejectUnauthorized: false } // SSL requerido para Render
  });
}

// Probar conexi√≥n al inicializar
async function testConnection() {
  try {
    console.log('üîÑ Probando conexi√≥n PostgreSQL...');
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as current_time, version() as pg_version');
    console.log('‚úÖ Conexi√≥n PostgreSQL exitosa');
    console.log('Server time:', result.rows[0].current_time);
    console.log('PostgreSQL version:', result.rows[0].pg_version.split(' ')[0]);
    client.release();
    return true;
  } catch (error) {
    console.error('‚ùå Error conectando a PostgreSQL:', error.message);
    return false;
  }
}

// Event listeners
pool.on('connect', () => {
  console.log('‚úÖ Nueva conexi√≥n PostgreSQL establecida');
});

pool.on('error', (err) => {
  console.error('‚ùå Error en el pool PostgreSQL:', err.message);
});

// Probar conexi√≥n
testConnection().then(success => {
  if (success) {
    console.log('‚úÖ Base de datos PostgreSQL configurada correctamente');
  } else {
    console.error('‚ùå No se pudo establecer conexi√≥n con PostgreSQL');
  }
}).catch(error => {
  console.error('‚ùå Error al probar la conexi√≥n PostgreSQL:', error.message);
});

export { pool };
